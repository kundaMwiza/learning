from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np 
import tensorflow as tf
import matplotlib
matplotlib.use('TKAgg')
from matplotlib import pyplot as plt

"""
Linear regression: find the best linear fit to our data
"""

def generateDateset():
    """ 
    data is generated by y = 2x + e
    where 'e' is sampled from a normal distribution
    """
    xBatch = np.linspace(-1, 1, 101)
    yBatch = 2 * xBatch + np.random.randn(*xBatch.shape) * 0.3
    return xBatch, yBatch

def linearRegression():
    x = tf.placeholder(tf.float32, shape=(None, ), name='x')
    y = tf.placeholder(tf.float32, shape=(None, ), name='y')

    with tf.variable_scope('lreg') as scope:
        w = tf.Variable(np.random.normal(), name='w')
        yPred = w*x
        loss = tf.reduce_mean(tf.square(yPred - y))
    return x, y, yPred, loss


def run():
    
    xBatch, yBatch = generateDateset()
    x, y, yPred, loss = linearRegression()
    optimzer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
    init = tf.global_variables_initializer
    
    with tf.Session() as sess:
        sess.run(init())
        feedDict = {x: xBatch, y: yBatch}
        for _ in range(50):
            lossVal, _ = sess.run([loss, optimzer], feedDict)
            print('loss:', lossVal)
        yPredBatch = sess.run([yPred], feedDict)

        # xTestBatch, yTestBatch = generateDateset()
        # feedDict = {x: xTestBatch, y: yTestBatch}
        # lossTest, testPred = sess.run([loss, yPred], feedDict)
        # print('test loss:', lossTest)

    plt.figure(1)
    plt.scatter(xBatch, yBatch)
    plt.plot(xBatch, np.squeeze(yPredBatch))
    plt.savefig('plot.png')

if __name__ == '__main__':
    run()




